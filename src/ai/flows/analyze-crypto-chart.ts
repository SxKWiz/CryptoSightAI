
'use server';

/**
 * @fileOverview AI-powered crypto chart analysis flow.
 *
 * - analyzeCryptoChart - Analyzes a crypto chart and provides a trade signal.
 * - AnalyzeCryptoChartInput - The input type for the analyzeCryptoChart function.
 * - AnalyzeCryptoChartOutput - The return type for the analyzeCryptoChart function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeCryptoChartInputSchema = z.object({
  chartData: z.string().describe('OHLCV chart data as a JSON string.'),
  tradingPair: z.string().describe('The trading pair being analyzed (e.g., BTCUSDT).'),
  tradingStyle: z.enum(['Day Trading', 'Swing Trading', 'Position Trading']).describe('The user\'s preferred trading style.'),
  riskTolerance: z.enum(['Conservative', 'Moderate', 'Aggressive']).describe('The user\'s risk tolerance.'),
});
export type AnalyzeCryptoChartInput = z.infer<typeof AnalyzeCryptoChartInputSchema>;

const AnalyzeCryptoChartOutputSchema = z.object({
  analysisSummary: z.string().describe('A summary of the AI analysis of the chart.'),
  riskLevel: z.enum(['Low', 'Medium', 'High']).describe('The assessed risk level of the trade.'),
  confidenceLevel: z.string().describe('The AI\'s confidence in this analysis, as a percentage (e.g., "85%").'),
  tradeSignal: z.object({
    entryPriceRange: z.string().describe('The recommended entry price range.'),
    takeProfitLevels: z.array(z.string()).describe('Recommended take profit levels.'),
    stopLoss: z.string().describe('The recommended stop loss level.'),
  }).describe('The trade signal generated by the AI.'),
});
export type AnalyzeCryptoChartOutput = z.infer<typeof AnalyzeCryptoChartOutputSchema>;

export async function analyzeCryptoChart(input: AnalyzeCryptoChartInput): Promise<AnalyzeCryptoChartOutput> {
  return analyzeCryptoChartFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeCryptoChartPrompt',
  input: {schema: AnalyzeCryptoChartInputSchema},
  output: {schema: AnalyzeCryptoChartOutputSchema},
  prompt: `You are an expert crypto trading analyst. Analyze the provided candlestick chart data and generate a trade signal tailored to the user's preferences.

User Preferences:
- Trading Style: {{tradingStyle}}
- Risk Tolerance: {{riskTolerance}}

Chart Data (OHLCV):
{{chartData}}

Trading Pair: {{tradingPair}}

Provide a summary analysis of the chart. Assess the risk of the potential trade as 'Low', 'Medium', or 'High'. Provide a confidence level as a percentage. 
Finally, generate a trade signal including entry price range, take profit levels, and stop loss. 

The generated signal MUST be appropriate for the user's {{tradingStyle}} style and {{riskTolerance}} risk tolerance. For example, a conservative, position-trading style should have wider stop losses and take-profit levels compared to an aggressive day-trading style. Be very strict and do not add any randomness.

Output:
`,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const analyzeCryptoChartFlow = ai.defineFlow(
  {
    name: 'analyzeCryptoChartFlow',
    inputSchema: AnalyzeCryptoChartInputSchema,
    outputSchema: AnalyzeCryptoChartOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

    