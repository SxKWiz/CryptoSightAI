'use server';

/**
 * @fileOverview AI-powered crypto chart analysis flow.
 *
 * - analyzeCryptoChart - Analyzes a crypto chart and provides a trade signal.
 * - AnalyzeCryptoChartInput - The input type for the analyzeCryptoChart function.
 * - AnalyzeCryptoChartOutput - The return type for the analyzeCryptoChart function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeCryptoChartInputSchema = z.object({
  chartData: z.string().describe('OHLCV chart data as a JSON string.'),
  tradingPair: z.string().describe('The trading pair being analyzed (e.g., BTCUSDT).'),
});
export type AnalyzeCryptoChartInput = z.infer<typeof AnalyzeCryptoChartInputSchema>;

const AnalyzeCryptoChartOutputSchema = z.object({
  analysisSummary: z.string().describe('A summary of the AI analysis of the chart.'),
  tradeSignal: z.object({
    entryPriceRange: z.string().describe('The recommended entry price range.'),
    takeProfitLevels: z.array(z.string()).describe('Recommended take profit levels.'),
    stopLoss: z.string().describe('The recommended stop loss level.'),
  }).describe('The trade signal generated by the AI.'),
});
export type AnalyzeCryptoChartOutput = z.infer<typeof AnalyzeCryptoChartOutputSchema>;

export async function analyzeCryptoChart(input: AnalyzeCryptoChartInput): Promise<AnalyzeCryptoChartOutput> {
  return analyzeCryptoChartFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeCryptoChartPrompt',
  input: {schema: AnalyzeCryptoChartInputSchema},
  output: {schema: AnalyzeCryptoChartOutputSchema},
  prompt: `You are an expert crypto trading analyst. Analyze the provided candlestick chart data and generate a trade signal.

Chart Data (OHLCV):
{{chartData}}

Trading Pair: {{tradingPair}}

Provide a summary analysis of the chart, and a trade signal including entry price range, take profit levels, and stop loss. Be very strict and do not add any randomness.

Output:
`,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const analyzeCryptoChartFlow = ai.defineFlow(
  {
    name: 'analyzeCryptoChartFlow',
    inputSchema: AnalyzeCryptoChartInputSchema,
    outputSchema: AnalyzeCryptoChartOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
